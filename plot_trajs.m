MARKERSIZE = 10;
if exist('optimal_mean_trajectory_ft','var') && lb_stoch_reach_avoid_ft > 0
%     scatter([initial_state(1), optimal_mean_trajectory_ft(1,:)],...
%             [initial_state(2), optimal_mean_trajectory_ft(2,:)],...
%             30, 'ro', 'filled');
    plot([initial_state(1), optimal_mean_trajectory_ft(1,:)],...
        [initial_state(2), optimal_mean_trajectory_ft(2,:)], 'ks--',...
        'MarkerSize',MARKERSIZE,'MarkerFaceColor','k');
    if length(legend_cell) < 6
        legend_cell{end+1} = 'Optimal $\bar{\mu}_{X}^{\bar{x}_0,\bar{U}}$  (OL [12])';
    end
    if ~isnan(concat_state_realization_ft)
%         [legend_cell] = plotMonteCarlo('(genzps-open)', mcarlo_result_ft,...
%             concat_state_realization_ft, n_mcarlo_sims, n_sims_to_plot,...
%             sys.state_dim, initial_state, legend_cell);
        ellipsoidsFromMonteCarloSims(concat_state_realization_ft, sys.state_dim, [1,2], {'k'});
    end
elseif ~exist('optimal_mean_trajectory_ft','var')
    lb_stoch_reach_avoid_ft = NaN;
    mcarlo_result_ft = NaN;
    elapsed_time_ft = NaN;     
end
if exist('optimal_mean_trajectory_cc_pwl','var') && lb_stoch_reach_avoid_cc_pwl > 0
%     scatter([initial_state(1), optimal_mean_trajectory_cc_pwl(1,:)],...
%         [initial_state(2), optimal_mean_trajectory_cc_pwl(2,:)],...
%         30, 'mo', 'filled');
    plot([initial_state(1), optimal_mean_trajectory_cc_pwl(1,:)],...
        [initial_state(2), optimal_mean_trajectory_cc_pwl(2,:)], 'mo--',...
        'MarkerSize',MARKERSIZE,'MarkerFaceColor','m');
    if length(legend_cell) < 6
        legend_cell{end+1} = 'Optimal $\bar{\mu}_{X}^{\bar{x}_0,\bar{U}}$  (OL (31))';
    end
    if ~isnan(concat_state_realization_cc_pwl)
%         [legend_cell] = plotMonteCarlo('(chance-open)', ...
%             mcarlo_result_cc_pwl, concat_state_realization_cc_pwl,...
%             n_mcarlo_sims, n_sims_to_plot, sys.state_dim, initial_state,...
%             legend_cell);
        ellipsoidsFromMonteCarloSims(concat_state_realization_cc_pwl,...
            sys.state_dim, [1,2], {'m'});
    end
elseif ~exist('optimal_mean_trajectory_cc_pwl','var')
    lb_stoch_reach_avoid_cc_pwl = NaN;
    mcarlo_result_cc_pwl = NaN;
    elapsed_time_cc_pwl = NaN;     
end
if exist('optimal_mean_trajectory_cc_pwl_closed','var') && lb_stoch_reach_avoid_cc_pwl_closed > 0
%     scatter([initial_state(1), optimal_mean_trajectory_cc_pwl_closed(1,:)],...
%         [initial_state(2), optimal_mean_trajectory_cc_pwl_closed(2,:)],...
%         30, 'bd', 'filled');
    plot([initial_state(1), optimal_mean_trajectory_cc_pwl_closed(1,:)],...
        [initial_state(2), optimal_mean_trajectory_cc_pwl_closed(2,:)], 'bd--',...
        'MarkerSize',MARKERSIZE,'MarkerFaceColor','b');
    if length(legend_cell) < 6
        legend_cell{end+1} = 'Optimal $\bar{\mu}_{X}^{\bar{x}_0,\bar{M},\bar{D}}$  (ADF (22))';
    end
    if ~isnan(concat_state_realization_cc_pwl_closed)
%         [legend_cell] = plotMonteCarlo('(chance-affine)',...
%             mcarlo_result_cc_pwl_closed,...
%             concat_state_realization_cc_pwl_closed, n_mcarlo_sims,...
%             n_sims_to_plot, sys.state_dim, initial_state, legend_cell);
        ellipsoidsFromMonteCarloSims(concat_state_realization_cc_pwl_closed,...
            sys.state_dim, [1,2], {'b'});
    end
elseif ~exist('optimal_mean_trajectory_cc_pwl_closed','var')
    lb_stoch_reach_avoid_cc_pwl_closed = NaN;
    mcarlo_result_cc_pwl_closed = NaN;
    elapsed_time_cc_pwl_closed = NaN;     
end
if exist('optimal_mean_trajectory_cc_uni_pwl_closed','var') && lb_stoch_reach_avoid_cc_uni_pwl_closed > 0
%     scatter([initial_state(1), optimal_mean_trajectory_cc_uni_pwl_closed(1,:)],...
%         [initial_state(2), optimal_mean_trajectory_cc_uni_pwl_closed(2,:)],...
%         30, 'bd', 'filled');
    plot([initial_state(1), optimal_mean_trajectory_cc_uni_pwl_closed(1,:)],...
        [initial_state(2), optimal_mean_trajectory_cc_uni_pwl_closed(2,:)], 'rp--',...
        'MarkerSize',MARKERSIZE,'MarkerFaceColor','b');
    if length(legend_cell) < 7
        legend_cell{end+1} = 'Optimal $\bar{\mu}_{X}^{\bar{x}_0,\bar{M},\bar{D}}$  (ADF [17])';
    end
    if ~isnan(concat_state_realization_cc_uni_pwl_closed)
%         [legend_cell] = plotMonteCarlo('(chance-affine)',...
%             mcarlo_result_cc_uni_pwl_closed,...
%             concat_state_realization_cc_uni_pwl_closed, n_mcarlo_sims,...
%             n_sims_to_plot, sys.state_dim, initial_state, legend_cell);
        ellipsoidsFromMonteCarloSims(concat_state_realization_cc_uni_pwl_closed,...
            sys.state_dim, [1,2], {'r'});
    end
elseif ~exist('optimal_mean_trajectory_cc_uni_pwl_closed','var')
    lb_stoch_reach_avoid_cc_uni_pwl_closed = NaN;
    mcarlo_result_cc_uni_pwl_closed = NaN;
    elapsed_time_cc_uni_pwl_closed = NaN;     
end
leg=legend(legend_cell, 'Location','EastOutside');
set(leg,'Interpreter','latex')
axis equal
yticks([-1.25:0.25:0.1])
xticks([-1.25:0.5:1.25])
ylim([-1.25 0.1]);
xlim([-1.25 1.25]);
% title(sprintf('Plot with %d Monte-Carlo sims', n_sims_to_plot));
%title('Plot with ellipsoid fit for 100 randomly chosen Monte-Carlo sims');
box on;
grid on;
disp('Skipped items would show up as NaN');
fprintf('FT: %1.3f | CC (Open): %1.3f | CC (Affine): %1.3f | CC (Uniform): %1.3f\n',...
    lb_stoch_reach_avoid_ft,...
    lb_stoch_reach_avoid_cc_pwl,...
    lb_stoch_reach_avoid_cc_pwl_closed, ...
    lb_stoch_reach_avoid_cc_uni_pwl_closed); 
fprintf('MC (%1.0e particles): %1.3f, %1.3f, %1.3f, %1.3f\n',...
    n_mcarlo_sims,...
    sum(mcarlo_result_ft)/n_mcarlo_sims, ...
    sum(mcarlo_result_cc_pwl)/n_mcarlo_sims,...
    sum(mcarlo_result_cc_pwl_closed)/n_mcarlo_sims,...
    sum(mcarlo_result_cc_uni_pwl_closed)/n_mcarlo_sims);
fprintf('Elapsed time: %1.3f, %1.3f, %1.3f, %1.3f seconds\n',...
    elapsed_time_ft, elapsed_time_cc_pwl, elapsed_time_cc_pwl_closed, ...
    elapsed_time_cc_uni_pwl_closed);
